{"version":3,"sources":["components/Button.tsx","components/Input.tsx","components/List.tsx","state/hooks.ts","state/task/taskSlice.ts","components/ListItem.tsx","components/TaskInput.tsx","pages/Tasks.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["Button","text","props","Item","Input","List","tasks","className","dataSource","locale","emptyText","description","renderItem","task","index","title","useDispatch","_useDispatch","_useSelector","initialState","ls","tasksSlice","createSlice","name","reducers","createTask","state","action","push","payload","completeTask","find","id","completed","deleteTask","filter","updateTask","map","actions","ListItem","useState","isEditing","setIsEditing","dispatch","classNames","onClick","checked","EditOutlined","DeleteOutlined","hidden","TaskInput","newTask","setNewTask","layout","size","value","onChange","event","target","Date","getTime","type","placeholder","icon","PlusOutlined","onSubmit","Tasks","useSelector","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a35a3a4c.chunk.js","sourcesContent":["import { Form, Button as AntButton, ButtonProps as AntButtonProps } from \"antd\";\nimport React, { FC } from \"react\";\n\ninterface ButtonProps extends AntButtonProps {\n  text: string;\n}\n\nconst Button: FC<ButtonProps> = ({ text, ...props }: ButtonProps) => {\n  return (\n    <Form.Item>\n      <AntButton {...props}>{text}</AntButton>\n    </Form.Item>\n  );\n};\n\nexport default Button;\n","import { Form, Input as AntInput, InputProps as AntInputProps } from \"antd\";\nimport React, { FC } from \"react\";\nimport { ChangeEvent } from \"react\";\n\ninterface InputProps extends AntInputProps {\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\nconst Input: FC<InputProps> = ({ ...props }: InputProps) => {\n  return (\n    <Form.Item>\n      <AntInput {...props} />\n    </Form.Item>\n  );\n};\n\nexport default Input;\n","import { Empty, List as AntList } from \"antd\";\nimport React, { FC } from \"react\";\nimport { Task } from \"../state/types\";\nimport { ListItem } from \".\";\n\ninterface ListProps {\n  tasks: Task[];\n}\n\nconst List: FC<ListProps> = ({ tasks }: ListProps) => {\n  return (\n    <AntList\n      className=\"c-list\"\n      dataSource={tasks}\n      locale={{ emptyText: <Empty description=\"No tasks.\" /> }}\n      renderItem={(task, index) => <ListItem key={task.title + index} task={task} />}\n    />\n  );\n};\n\nexport default List;\n","import { TypedUseSelectorHook, useDispatch as _useDispatch, useSelector as _useSelector } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\nexport const useDispatch = (): Dispatch => _useDispatch<AppDispatch>();\nexport const useSelector: TypedUseSelectorHook<RootState> = _useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Task } from \"../types\";\nimport * as ls from \"local-storage\";\n\nconst initialState: Task[] = ls.get<Task[]>(\"tasks\") || [];\nexport const tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState,\n  reducers: {\n    createTask: (state: Task[], action: PayloadAction<Task>) => {\n      state.push(action.payload);\n      ls.set<Task[]>(\"tasks\", state);\n    },\n    completeTask: (state: Task[], action: PayloadAction<Task>) => {\n      const task = state.find(task => task.id === action.payload.id);\n      if (task) task.completed = !task.completed;\n      ls.set<Task[]>(\"tasks\", state);\n    },\n    deleteTask: (state: Task[], action: PayloadAction<Task>): Task[] => {\n      state = state.filter(task => task.id !== action.payload.id);\n      ls.set<Task[]>(\"tasks\", state);\n      return state;\n    },\n    updateTask: (state: Task[], action: PayloadAction<Task>): Task[] => {\n      state = state.map(task => {\n        if (task.id === action.payload.id) {\n          return { ...action.payload };\n        }\n        return task;\n      });\n      ls.set<Task[]>(\"tasks\", state);\n      return state;\n    }\n  }\n});\n\nexport const { createTask, completeTask, updateTask, deleteTask } = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","import { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\nimport { Checkbox, CheckboxProps, Divider, List } from \"antd\";\nimport classNames from \"classnames\";\nimport React, { FC } from \"react\";\nimport { useState } from \"react\";\nimport { TaskInput } from \".\";\nimport { useDispatch } from \"../state/hooks\";\nimport { completeTask, deleteTask } from \"../state/task/taskSlice\";\nimport { Task } from \"../state/types\";\n\ninterface ListItemProps extends CheckboxProps {\n  task: Task;\n}\n\nconst ListItem: FC<ListItemProps> = ({ task }: ListItemProps) => {\n  const [isEditing, setIsEditing] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const onComplete = () => {\n    dispatch(completeTask(task));\n  };\n  const onDelete = () => {\n    dispatch(deleteTask(task));\n  };\n\n  return (\n    <List.Item className={classNames(\"c-listitem\", { \"c-listitem-completed\": task.completed })}>\n      <span className=\"c-listitem-row\">\n        <span className=\"c-checkbox\">\n          <Checkbox onClick={onComplete} checked={task.completed} />\n        </span>\n        <span className=\"c-listitem-description\">{task.title}</span>\n        <span className=\"c-icons\">\n          <EditOutlined onClick={() => setIsEditing(!isEditing)} />\n          <DeleteOutlined onClick={onDelete} />\n        </span>\n      </span>\n      <span className={classNames({ \"c-hidden\": !isEditing })}>\n        <Divider />\n        <TaskInput className=\"c-listitem-input\" hidden={!isEditing} task={task} />\n      </span>\n    </List.Item>\n  );\n};\n\nexport default ListItem;\n","import React, { ChangeEvent, FC, useState } from \"react\";\nimport { Button, Input } from \".\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { Form, InputProps } from \"antd\";\nimport { Task } from \"../state/types\";\nimport { useDispatch } from \"../state/hooks\";\nimport { createTask, updateTask } from \"../state/task/taskSlice\";\ninterface TaskInputProps extends InputProps {\n  hidden?: boolean;\n  task?: Task;\n}\n\nconst TaskInput: FC<TaskInputProps> = ({ hidden, task, ...props }: TaskInputProps) => {\n  const [newTask, setNewTask] = useState<Task | null>(null);\n\n  const dispatch = useDispatch();\n  const onSubmit = (newTask: Task) => {\n    if (task) {\n      dispatch(updateTask(newTask));\n    } else {\n      dispatch(createTask(newTask));\n    }\n  };\n\n  const text = task ? \"Edit task\" : \"Add task\";\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (task) {\n      setNewTask({ id: task.id, title: event.target.value, completed: task.completed });\n    } else {\n      setNewTask({ id: new Date().getTime(), title: event.target.value, completed: false });\n    }\n  };\n\n  const onClick = () => {\n    if (newTask) {\n      onSubmit(newTask);\n      setNewTask(null);\n    }\n  };\n\n  if (hidden) {\n    return null;\n  }\n  return (\n    <Form layout=\"inline\" size=\"small\" className={props.className}>\n      <Input value={newTask?.title} onChange={onChange} type=\"text\" name=\"textInput\" placeholder=\"Input task title\" />\n      <Button icon={<PlusOutlined />} onClick={onClick} text={text} type=\"primary\" />\n    </Form>\n  );\n};\n\nexport default TaskInput;\n","import React, { FC } from \"react\";\nimport TaskInput from \"../components/TaskInput\";\nimport { useSelector } from \"react-redux\";\nimport { List } from \"../components\";\nimport { Row } from \"antd\";\nimport { RootState } from \"../state/store\";\n\nconst Tasks: FC = () => {\n  const tasks = useSelector((state: RootState) => state.tasks);\n\n  return (\n    <div className=\"c-tasks\">\n      <Row className=\"c-row\">\n        <List tasks={tasks} />\n      </Row>\n      <Row className=\"c-row\">\n        <TaskInput className=\"c-tasks-input\" />\n      </Row>\n    </div>\n  );\n};\n\nexport default Tasks;\n","import React, { FC } from \"react\";\nimport \"./styles/main.scss\";\nimport { Tasks } from \"./pages\";\n\nconst App: FC = () => {\n  return <Tasks />;\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport tasksReducer from \"./task/taskSlice\";\n\n// export const store = createStore(taskReducer);\n\nexport const store = configureStore({\n  reducer: {\n    tasks: tasksReducer\n  }\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store } from \"./state/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}